// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGoLotteryLotteryLotteryIdPrefix = "cache:goLotteryLottery:lottery:id:"
)

type (
	lotteryModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Lottery) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Lottery) error
		FindOne(ctx context.Context, id int64) (*Lottery, error)
		Update(ctx context.Context, tx *gorm.DB, data *Lottery) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Lottery) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Lottery) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultLotteryModel struct {
		gormc.CachedConn
		table string
	}

	Lottery struct {
		Id            int64     `gorm:"column:id;primary_key"`
		UserId        int64     `gorm:"column:user_id"`        // 发起抽奖用户ID
		Name          string    `gorm:"column:name"`           // 默认取一等奖名称
		Thumb         string    `gorm:"column:thumb"`          // 默认取一等经配图
		PublishTime   time.Time `gorm:"column:publish_time"`   // 发布抽奖时间
		JoinNumber    int64     `gorm:"column:join_number"`    // 自动开奖人数
		Introduce     string    `gorm:"column:introduce"`      // 抽奖说明
		AwardDeadline time.Time `gorm:"column:award_deadline"` // 领奖截止时间
		IsSelected    int64     `gorm:"column:is_selected"`    // 是否精选: 0否 1是
		AnnounceType  int64     `gorm:"column:announce_type"`  // 开奖设置：1按时间开奖 2按人数开奖 3即抽即中
		AnnounceTime  time.Time `gorm:"column:announce_time"`  // 开奖时间
		CreateTime    time.Time `gorm:"column:create_time"`
		UpdateTime    time.Time `gorm:"column:update_time"`
		IsAnnounced   int64     `gorm:"column:is_announced"`  // 是否开奖：0未开奖 1已经开奖
		SponsorId     int64     `gorm:"column:sponsor_id"`    // 发起抽奖赞助商ID
		IsClocked     int64     `gorm:"column:is_clocked"`    // 是否开启打卡任务：0未开启 1已开启
		ClockTaskId   int64     `gorm:"column:clock_task_id"` // 打卡任务任务ID
	}
)

func (Lottery) TableName() string {
	return "`lottery`"
}

func newLotteryModel(conn *gorm.DB, c cache.CacheConf) *defaultLotteryModel {
	return &defaultLotteryModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`lottery`",
	}
}

func (m *defaultLotteryModel) GetCacheKeys(data *Lottery) []string {
	if data == nil {
		return []string{}
	}
	goLotteryLotteryLotteryIdKey := fmt.Sprintf("%s%v", cacheGoLotteryLotteryLotteryIdPrefix, data.Id)
	cacheKeys := []string{
		goLotteryLotteryLotteryIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultLotteryModel) Insert(ctx context.Context, tx *gorm.DB, data *Lottery) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Omit(lotteryOmitColumns...).Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultLotteryModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Lottery) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultLotteryModel) FindOne(ctx context.Context, id int64) (*Lottery, error) {
	goLotteryLotteryLotteryIdKey := fmt.Sprintf("%s%v", cacheGoLotteryLotteryLotteryIdPrefix, id)
	var resp Lottery
	err := m.QueryCtx(ctx, &resp, goLotteryLotteryLotteryIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Lottery{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLotteryModel) Update(ctx context.Context, tx *gorm.DB, data *Lottery) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Omit(lotteryOmitColumns...).Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultLotteryModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Lottery) error {
	clearData := make([]Lottery, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultLotteryModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Lottery{}, id).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultLotteryModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Lottery) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultLotteryModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultLotteryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoLotteryLotteryLotteryIdPrefix, primary)
}

func (m *defaultLotteryModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Lottery{}).Where("`id` = ?", primary).Take(v).Error
}
