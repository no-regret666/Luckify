// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: app/lottery/cmd/rpc/pb/lottery.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Lottery_SearchLottery_FullMethodName                  = "/pb.lottery/SearchLottery"
	Lottery_GetLotteryListSlowQuery_FullMethodName        = "/pb.lottery/GetLotteryListSlowQuery"
	Lottery_GetLotteryListAfterLogin_FullMethodName       = "/pb.lottery/GetLotteryListAfterLogin"
	Lottery_AddLottery_FullMethodName                     = "/pb.lottery/AddLottery"
	Lottery_LotteryDetail_FullMethodName                  = "/pb.lottery/LotteryDetail"
	Lottery_AnnounceLottery_FullMethodName                = "/pb.lottery/AnnounceLottery"
	Lottery_GetUserWonList_FullMethodName                 = "/pb.lottery/GetUserWonList"
	Lottery_GetWonListByLotteryId_FullMethodName          = "/pb.lottery/GetWonListByLotteryId"
	Lottery_GetUserAllList_FullMethodName                 = "/pb.lottery/GetUserAllList"
	Lottery_GetUserCreatedList_FullMethodName             = "/pb.lottery/GetUserCreatedList"
	Lottery_SearchLotteryParticipation_FullMethodName     = "/pb.lottery/SearchLotteryParticipation"
	Lottery_GetLotteryStatistic_FullMethodName            = "/pb.lottery/GetLotteryStatistic"
	Lottery_AddLotteryParticipation_FullMethodName        = "/pb.lottery/AddLotteryParticipation"
	Lottery_AddInstantLotteryParticipation_FullMethodName = "/pb.lottery/AddInstantLotteryParticipation"
	Lottery_CheckLotteryParticipated_FullMethodName       = "/pb.lottery/CheckLotteryParticipated"
	Lottery_CheckLotteryCreated_FullMethodName            = "/pb.lottery/CheckLotteryCreated"
)

// LotteryClient is the client API for Lottery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LotteryClient interface {
	SearchLottery(ctx context.Context, in *SearchLotteryReq, opts ...grpc.CallOption) (*SearchLotteryResp, error)
	GetLotteryListSlowQuery(ctx context.Context, in *GetLotteryListSlowQueryReq, opts ...grpc.CallOption) (*GetLotteryListSlowQueryResp, error)
	GetLotteryListAfterLogin(ctx context.Context, in *GetLotteryListAfterLoginReq, opts ...grpc.CallOption) (*GetLotteryListAfterLoginResp, error)
	AddLottery(ctx context.Context, in *AddLotteryReq, opts ...grpc.CallOption) (*AddLotteryResp, error)
	LotteryDetail(ctx context.Context, in *LotteryDetailReq, opts ...grpc.CallOption) (*LotteryDetailResp, error)
	AnnounceLottery(ctx context.Context, in *AnnounceLotteryReq, opts ...grpc.CallOption) (*AnnounceLotteryResp, error)
	GetUserWonList(ctx context.Context, in *GetUserWonListReq, opts ...grpc.CallOption) (*GetUserWonListResp, error)
	GetWonListByLotteryId(ctx context.Context, in *GetWonListByLotteryIdReq, opts ...grpc.CallOption) (*GetWonListByLotteryIdResp, error)
	GetUserAllList(ctx context.Context, in *GetUserAllListReq, opts ...grpc.CallOption) (*GetUserAllListResp, error)
	GetUserCreatedList(ctx context.Context, in *GetUserCreatedListReq, opts ...grpc.CallOption) (*GetUserCreatedListResp, error)
	SearchLotteryParticipation(ctx context.Context, in *SearchLotteryParticipationReq, opts ...grpc.CallOption) (*SearchLotteryParticipationResp, error)
	GetLotteryStatistic(ctx context.Context, in *GetLotteryStatisticReq, opts ...grpc.CallOption) (*GetLotteryStatisticResp, error)
	AddLotteryParticipation(ctx context.Context, in *AddLotteryParticipationReq, opts ...grpc.CallOption) (*AddLotteryParticipationResp, error)
	AddInstantLotteryParticipation(ctx context.Context, in *AddInstantLotteryParticipationReq, opts ...grpc.CallOption) (*AddInstantLotteryParticipationResp, error)
	CheckLotteryParticipated(ctx context.Context, in *CheckLotteryParticipatedReq, opts ...grpc.CallOption) (*CheckLotteryParticipatedResp, error)
	CheckLotteryCreated(ctx context.Context, in *CheckLotteryCreatedReq, opts ...grpc.CallOption) (*CheckLotteryCreatedResp, error)
}

type lotteryClient struct {
	cc grpc.ClientConnInterface
}

func NewLotteryClient(cc grpc.ClientConnInterface) LotteryClient {
	return &lotteryClient{cc}
}

func (c *lotteryClient) SearchLottery(ctx context.Context, in *SearchLotteryReq, opts ...grpc.CallOption) (*SearchLotteryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchLotteryResp)
	err := c.cc.Invoke(ctx, Lottery_SearchLottery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) GetLotteryListSlowQuery(ctx context.Context, in *GetLotteryListSlowQueryReq, opts ...grpc.CallOption) (*GetLotteryListSlowQueryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLotteryListSlowQueryResp)
	err := c.cc.Invoke(ctx, Lottery_GetLotteryListSlowQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) GetLotteryListAfterLogin(ctx context.Context, in *GetLotteryListAfterLoginReq, opts ...grpc.CallOption) (*GetLotteryListAfterLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLotteryListAfterLoginResp)
	err := c.cc.Invoke(ctx, Lottery_GetLotteryListAfterLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) AddLottery(ctx context.Context, in *AddLotteryReq, opts ...grpc.CallOption) (*AddLotteryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLotteryResp)
	err := c.cc.Invoke(ctx, Lottery_AddLottery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) LotteryDetail(ctx context.Context, in *LotteryDetailReq, opts ...grpc.CallOption) (*LotteryDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LotteryDetailResp)
	err := c.cc.Invoke(ctx, Lottery_LotteryDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) AnnounceLottery(ctx context.Context, in *AnnounceLotteryReq, opts ...grpc.CallOption) (*AnnounceLotteryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnnounceLotteryResp)
	err := c.cc.Invoke(ctx, Lottery_AnnounceLottery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) GetUserWonList(ctx context.Context, in *GetUserWonListReq, opts ...grpc.CallOption) (*GetUserWonListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserWonListResp)
	err := c.cc.Invoke(ctx, Lottery_GetUserWonList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) GetWonListByLotteryId(ctx context.Context, in *GetWonListByLotteryIdReq, opts ...grpc.CallOption) (*GetWonListByLotteryIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWonListByLotteryIdResp)
	err := c.cc.Invoke(ctx, Lottery_GetWonListByLotteryId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) GetUserAllList(ctx context.Context, in *GetUserAllListReq, opts ...grpc.CallOption) (*GetUserAllListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAllListResp)
	err := c.cc.Invoke(ctx, Lottery_GetUserAllList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) GetUserCreatedList(ctx context.Context, in *GetUserCreatedListReq, opts ...grpc.CallOption) (*GetUserCreatedListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserCreatedListResp)
	err := c.cc.Invoke(ctx, Lottery_GetUserCreatedList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) SearchLotteryParticipation(ctx context.Context, in *SearchLotteryParticipationReq, opts ...grpc.CallOption) (*SearchLotteryParticipationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchLotteryParticipationResp)
	err := c.cc.Invoke(ctx, Lottery_SearchLotteryParticipation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) GetLotteryStatistic(ctx context.Context, in *GetLotteryStatisticReq, opts ...grpc.CallOption) (*GetLotteryStatisticResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLotteryStatisticResp)
	err := c.cc.Invoke(ctx, Lottery_GetLotteryStatistic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) AddLotteryParticipation(ctx context.Context, in *AddLotteryParticipationReq, opts ...grpc.CallOption) (*AddLotteryParticipationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLotteryParticipationResp)
	err := c.cc.Invoke(ctx, Lottery_AddLotteryParticipation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) AddInstantLotteryParticipation(ctx context.Context, in *AddInstantLotteryParticipationReq, opts ...grpc.CallOption) (*AddInstantLotteryParticipationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddInstantLotteryParticipationResp)
	err := c.cc.Invoke(ctx, Lottery_AddInstantLotteryParticipation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) CheckLotteryParticipated(ctx context.Context, in *CheckLotteryParticipatedReq, opts ...grpc.CallOption) (*CheckLotteryParticipatedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckLotteryParticipatedResp)
	err := c.cc.Invoke(ctx, Lottery_CheckLotteryParticipated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteryClient) CheckLotteryCreated(ctx context.Context, in *CheckLotteryCreatedReq, opts ...grpc.CallOption) (*CheckLotteryCreatedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckLotteryCreatedResp)
	err := c.cc.Invoke(ctx, Lottery_CheckLotteryCreated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LotteryServer is the server API for Lottery service.
// All implementations must embed UnimplementedLotteryServer
// for forward compatibility.
type LotteryServer interface {
	SearchLottery(context.Context, *SearchLotteryReq) (*SearchLotteryResp, error)
	GetLotteryListSlowQuery(context.Context, *GetLotteryListSlowQueryReq) (*GetLotteryListSlowQueryResp, error)
	GetLotteryListAfterLogin(context.Context, *GetLotteryListAfterLoginReq) (*GetLotteryListAfterLoginResp, error)
	AddLottery(context.Context, *AddLotteryReq) (*AddLotteryResp, error)
	LotteryDetail(context.Context, *LotteryDetailReq) (*LotteryDetailResp, error)
	AnnounceLottery(context.Context, *AnnounceLotteryReq) (*AnnounceLotteryResp, error)
	GetUserWonList(context.Context, *GetUserWonListReq) (*GetUserWonListResp, error)
	GetWonListByLotteryId(context.Context, *GetWonListByLotteryIdReq) (*GetWonListByLotteryIdResp, error)
	GetUserAllList(context.Context, *GetUserAllListReq) (*GetUserAllListResp, error)
	GetUserCreatedList(context.Context, *GetUserCreatedListReq) (*GetUserCreatedListResp, error)
	SearchLotteryParticipation(context.Context, *SearchLotteryParticipationReq) (*SearchLotteryParticipationResp, error)
	GetLotteryStatistic(context.Context, *GetLotteryStatisticReq) (*GetLotteryStatisticResp, error)
	AddLotteryParticipation(context.Context, *AddLotteryParticipationReq) (*AddLotteryParticipationResp, error)
	AddInstantLotteryParticipation(context.Context, *AddInstantLotteryParticipationReq) (*AddInstantLotteryParticipationResp, error)
	CheckLotteryParticipated(context.Context, *CheckLotteryParticipatedReq) (*CheckLotteryParticipatedResp, error)
	CheckLotteryCreated(context.Context, *CheckLotteryCreatedReq) (*CheckLotteryCreatedResp, error)
	mustEmbedUnimplementedLotteryServer()
}

// UnimplementedLotteryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLotteryServer struct{}

func (UnimplementedLotteryServer) SearchLottery(context.Context, *SearchLotteryReq) (*SearchLotteryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLottery not implemented")
}
func (UnimplementedLotteryServer) GetLotteryListSlowQuery(context.Context, *GetLotteryListSlowQueryReq) (*GetLotteryListSlowQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLotteryListSlowQuery not implemented")
}
func (UnimplementedLotteryServer) GetLotteryListAfterLogin(context.Context, *GetLotteryListAfterLoginReq) (*GetLotteryListAfterLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLotteryListAfterLogin not implemented")
}
func (UnimplementedLotteryServer) AddLottery(context.Context, *AddLotteryReq) (*AddLotteryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLottery not implemented")
}
func (UnimplementedLotteryServer) LotteryDetail(context.Context, *LotteryDetailReq) (*LotteryDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LotteryDetail not implemented")
}
func (UnimplementedLotteryServer) AnnounceLottery(context.Context, *AnnounceLotteryReq) (*AnnounceLotteryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceLottery not implemented")
}
func (UnimplementedLotteryServer) GetUserWonList(context.Context, *GetUserWonListReq) (*GetUserWonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWonList not implemented")
}
func (UnimplementedLotteryServer) GetWonListByLotteryId(context.Context, *GetWonListByLotteryIdReq) (*GetWonListByLotteryIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWonListByLotteryId not implemented")
}
func (UnimplementedLotteryServer) GetUserAllList(context.Context, *GetUserAllListReq) (*GetUserAllListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAllList not implemented")
}
func (UnimplementedLotteryServer) GetUserCreatedList(context.Context, *GetUserCreatedListReq) (*GetUserCreatedListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCreatedList not implemented")
}
func (UnimplementedLotteryServer) SearchLotteryParticipation(context.Context, *SearchLotteryParticipationReq) (*SearchLotteryParticipationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLotteryParticipation not implemented")
}
func (UnimplementedLotteryServer) GetLotteryStatistic(context.Context, *GetLotteryStatisticReq) (*GetLotteryStatisticResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLotteryStatistic not implemented")
}
func (UnimplementedLotteryServer) AddLotteryParticipation(context.Context, *AddLotteryParticipationReq) (*AddLotteryParticipationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLotteryParticipation not implemented")
}
func (UnimplementedLotteryServer) AddInstantLotteryParticipation(context.Context, *AddInstantLotteryParticipationReq) (*AddInstantLotteryParticipationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstantLotteryParticipation not implemented")
}
func (UnimplementedLotteryServer) CheckLotteryParticipated(context.Context, *CheckLotteryParticipatedReq) (*CheckLotteryParticipatedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLotteryParticipated not implemented")
}
func (UnimplementedLotteryServer) CheckLotteryCreated(context.Context, *CheckLotteryCreatedReq) (*CheckLotteryCreatedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLotteryCreated not implemented")
}
func (UnimplementedLotteryServer) mustEmbedUnimplementedLotteryServer() {}
func (UnimplementedLotteryServer) testEmbeddedByValue()                 {}

// UnsafeLotteryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LotteryServer will
// result in compilation errors.
type UnsafeLotteryServer interface {
	mustEmbedUnimplementedLotteryServer()
}

func RegisterLotteryServer(s grpc.ServiceRegistrar, srv LotteryServer) {
	// If the following call pancis, it indicates UnimplementedLotteryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Lottery_ServiceDesc, srv)
}

func _Lottery_SearchLottery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLotteryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).SearchLottery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_SearchLottery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).SearchLottery(ctx, req.(*SearchLotteryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_GetLotteryListSlowQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLotteryListSlowQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).GetLotteryListSlowQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_GetLotteryListSlowQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).GetLotteryListSlowQuery(ctx, req.(*GetLotteryListSlowQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_GetLotteryListAfterLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLotteryListAfterLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).GetLotteryListAfterLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_GetLotteryListAfterLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).GetLotteryListAfterLogin(ctx, req.(*GetLotteryListAfterLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_AddLottery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLotteryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).AddLottery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_AddLottery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).AddLottery(ctx, req.(*AddLotteryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_LotteryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).LotteryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_LotteryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).LotteryDetail(ctx, req.(*LotteryDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_AnnounceLottery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceLotteryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).AnnounceLottery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_AnnounceLottery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).AnnounceLottery(ctx, req.(*AnnounceLotteryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_GetUserWonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWonListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).GetUserWonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_GetUserWonList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).GetUserWonList(ctx, req.(*GetUserWonListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_GetWonListByLotteryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWonListByLotteryIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).GetWonListByLotteryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_GetWonListByLotteryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).GetWonListByLotteryId(ctx, req.(*GetWonListByLotteryIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_GetUserAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAllListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).GetUserAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_GetUserAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).GetUserAllList(ctx, req.(*GetUserAllListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_GetUserCreatedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCreatedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).GetUserCreatedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_GetUserCreatedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).GetUserCreatedList(ctx, req.(*GetUserCreatedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_SearchLotteryParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLotteryParticipationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).SearchLotteryParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_SearchLotteryParticipation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).SearchLotteryParticipation(ctx, req.(*SearchLotteryParticipationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_GetLotteryStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLotteryStatisticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).GetLotteryStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_GetLotteryStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).GetLotteryStatistic(ctx, req.(*GetLotteryStatisticReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_AddLotteryParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLotteryParticipationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).AddLotteryParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_AddLotteryParticipation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).AddLotteryParticipation(ctx, req.(*AddLotteryParticipationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_AddInstantLotteryParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstantLotteryParticipationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).AddInstantLotteryParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_AddInstantLotteryParticipation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).AddInstantLotteryParticipation(ctx, req.(*AddInstantLotteryParticipationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_CheckLotteryParticipated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLotteryParticipatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).CheckLotteryParticipated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_CheckLotteryParticipated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).CheckLotteryParticipated(ctx, req.(*CheckLotteryParticipatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lottery_CheckLotteryCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLotteryCreatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).CheckLotteryCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lottery_CheckLotteryCreated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).CheckLotteryCreated(ctx, req.(*CheckLotteryCreatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Lottery_ServiceDesc is the grpc.ServiceDesc for Lottery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lottery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.lottery",
	HandlerType: (*LotteryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchLottery",
			Handler:    _Lottery_SearchLottery_Handler,
		},
		{
			MethodName: "GetLotteryListSlowQuery",
			Handler:    _Lottery_GetLotteryListSlowQuery_Handler,
		},
		{
			MethodName: "GetLotteryListAfterLogin",
			Handler:    _Lottery_GetLotteryListAfterLogin_Handler,
		},
		{
			MethodName: "AddLottery",
			Handler:    _Lottery_AddLottery_Handler,
		},
		{
			MethodName: "LotteryDetail",
			Handler:    _Lottery_LotteryDetail_Handler,
		},
		{
			MethodName: "AnnounceLottery",
			Handler:    _Lottery_AnnounceLottery_Handler,
		},
		{
			MethodName: "GetUserWonList",
			Handler:    _Lottery_GetUserWonList_Handler,
		},
		{
			MethodName: "GetWonListByLotteryId",
			Handler:    _Lottery_GetWonListByLotteryId_Handler,
		},
		{
			MethodName: "GetUserAllList",
			Handler:    _Lottery_GetUserAllList_Handler,
		},
		{
			MethodName: "GetUserCreatedList",
			Handler:    _Lottery_GetUserCreatedList_Handler,
		},
		{
			MethodName: "SearchLotteryParticipation",
			Handler:    _Lottery_SearchLotteryParticipation_Handler,
		},
		{
			MethodName: "GetLotteryStatistic",
			Handler:    _Lottery_GetLotteryStatistic_Handler,
		},
		{
			MethodName: "AddLotteryParticipation",
			Handler:    _Lottery_AddLotteryParticipation_Handler,
		},
		{
			MethodName: "AddInstantLotteryParticipation",
			Handler:    _Lottery_AddInstantLotteryParticipation_Handler,
		},
		{
			MethodName: "CheckLotteryParticipated",
			Handler:    _Lottery_CheckLotteryParticipated_Handler,
		},
		{
			MethodName: "CheckLotteryCreated",
			Handler:    _Lottery_CheckLotteryCreated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/lottery/cmd/rpc/pb/lottery.proto",
}
