// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uploadFileFieldNames          = builder.RawFieldNames(&UploadFile{})
	uploadFileRows                = strings.Join(uploadFileFieldNames, ",")
	uploadFileRowsExpectAutoSet   = strings.Join(stringx.Remove(uploadFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uploadFileRowsWithPlaceHolder = strings.Join(stringx.Remove(uploadFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoLotteryUploadUploadFileIdPrefix = "cache:goLotteryUpload:uploadFile:id:"
)

type (
	uploadFileModel interface {
		Insert(ctx context.Context, data *UploadFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UploadFile, error)
		Update(ctx context.Context, data *UploadFile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUploadFileModel struct {
		sqlc.CachedConn
		table string
	}

	UploadFile struct {
		Id         int64     `db:"id"`
		UserId     int64     `db:"user_id"`   // 上传用户id
		FileName   string    `db:"file_name"` // 文件名
		Ext        string    `db:"ext"`       // 扩展名
		Size       int64     `db:"size"`      // 文件大小
		Url        string    `db:"url"`       // 下载链接
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newUploadFileModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUploadFileModel {
	return &defaultUploadFileModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`upload_file`",
	}
}

func (m *defaultUploadFileModel) Delete(ctx context.Context, id int64) error {
	goLotteryUploadUploadFileIdKey := fmt.Sprintf("%s%v", cacheGoLotteryUploadUploadFileIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goLotteryUploadUploadFileIdKey)
	return err
}

func (m *defaultUploadFileModel) FindOne(ctx context.Context, id int64) (*UploadFile, error) {
	goLotteryUploadUploadFileIdKey := fmt.Sprintf("%s%v", cacheGoLotteryUploadUploadFileIdPrefix, id)
	var resp UploadFile
	err := m.QueryRowCtx(ctx, &resp, goLotteryUploadUploadFileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uploadFileRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUploadFileModel) Insert(ctx context.Context, data *UploadFile) (sql.Result, error) {
	goLotteryUploadUploadFileIdKey := fmt.Sprintf("%s%v", cacheGoLotteryUploadUploadFileIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, uploadFileRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.FileName, data.Ext, data.Size, data.Url)
	}, goLotteryUploadUploadFileIdKey)
	return ret, err
}

func (m *defaultUploadFileModel) Update(ctx context.Context, data *UploadFile) error {
	goLotteryUploadUploadFileIdKey := fmt.Sprintf("%s%v", cacheGoLotteryUploadUploadFileIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uploadFileRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.FileName, data.Ext, data.Size, data.Url, data.Id)
	}, goLotteryUploadUploadFileIdKey)
	return err
}

func (m *defaultUploadFileModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoLotteryUploadUploadFileIdPrefix, primary)
}

func (m *defaultUploadFileModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uploadFileRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUploadFileModel) tableName() string {
	return m.table
}
