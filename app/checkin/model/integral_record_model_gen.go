// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGoLotteryCheckinIntegralRecordIdPrefix = "cache:goLotteryCheckin:integralRecord:id:"
)

type (
	integralRecordModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *IntegralRecord) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []IntegralRecord) error
		FindOne(ctx context.Context, id int64) (*IntegralRecord, error)
		Update(ctx context.Context, tx *gorm.DB, data *IntegralRecord) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []IntegralRecord) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []IntegralRecord) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultIntegralRecordModel struct {
		gormc.CachedConn
		table string
	}

	IntegralRecord struct {
		Id         int64     `gorm:"column:id;primary_key"`
		UserId     int64     `gorm:"column:user_id"`
		Integral   int64     `gorm:"column:integral"` // points added or subtracted
		Content    string    `gorm:"column:content"`
		CreateTime time.Time `gorm:"column:create_time"` // 创建时间
		UpdateTime time.Time `gorm:"column:update_time"` // 更新时间
	}
)

func (IntegralRecord) TableName() string {
	return "`integral_record`"
}

func newIntegralRecordModel(conn *gorm.DB, c cache.CacheConf) *defaultIntegralRecordModel {
	return &defaultIntegralRecordModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`integral_record`",
	}
}

func (m *defaultIntegralRecordModel) GetCacheKeys(data *IntegralRecord) []string {
	if data == nil {
		return []string{}
	}
	goLotteryCheckinIntegralRecordIdKey := fmt.Sprintf("%s%v", cacheGoLotteryCheckinIntegralRecordIdPrefix, data.Id)
	cacheKeys := []string{
		goLotteryCheckinIntegralRecordIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultIntegralRecordModel) Insert(ctx context.Context, tx *gorm.DB, data *IntegralRecord) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Omit(integralRecordOmitColumns...).Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultIntegralRecordModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []IntegralRecord) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultIntegralRecordModel) FindOne(ctx context.Context, id int64) (*IntegralRecord, error) {
	goLotteryCheckinIntegralRecordIdKey := fmt.Sprintf("%s%v", cacheGoLotteryCheckinIntegralRecordIdPrefix, id)
	var resp IntegralRecord
	err := m.QueryCtx(ctx, &resp, goLotteryCheckinIntegralRecordIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&IntegralRecord{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIntegralRecordModel) Update(ctx context.Context, tx *gorm.DB, data *IntegralRecord) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Omit(integralRecordOmitColumns...).Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultIntegralRecordModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []IntegralRecord) error {
	clearData := make([]IntegralRecord, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultIntegralRecordModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&IntegralRecord{}, id).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultIntegralRecordModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []IntegralRecord) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultIntegralRecordModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultIntegralRecordModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoLotteryCheckinIntegralRecordIdPrefix, primary)
}

func (m *defaultIntegralRecordModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&IntegralRecord{}).Where("`id` = ?", primary).Take(v).Error
}
