// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: checkin.proto

package checkin

import (
	"context"

	"Luckify/app/checkin/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCheckinRecordReq           = pb.AddCheckinRecordReq
	AddCheckinRecordResp          = pb.AddCheckinRecordResp
	AddIntegralRecordReq          = pb.AddIntegralRecordReq
	AddIntegralRecordResp         = pb.AddIntegralRecordResp
	AddIntegralReq                = pb.AddIntegralReq
	AddIntegralResp               = pb.AddIntegralResp
	AddTaskRecordReq              = pb.AddTaskRecordReq
	AddTaskRecordResp             = pb.AddTaskRecordResp
	AddTasksReq                   = pb.AddTasksReq
	AddTasksResp                  = pb.AddTasksResp
	CheckinRecord                 = pb.CheckinRecord
	DelIntegralRecordReq          = pb.DelIntegralRecordReq
	DelIntegralRecordResp         = pb.DelIntegralRecordResp
	DelTaskRecordReq              = pb.DelTaskRecordReq
	DelTaskRecordResp             = pb.DelTaskRecordResp
	DelTasksReq                   = pb.DelTasksReq
	DelTasksResp                  = pb.DelTasksResp
	GetCheckinRecordByUserIdReq   = pb.GetCheckinRecordByUserIdReq
	GetCheckinRecordByUserIdResp  = pb.GetCheckinRecordByUserIdResp
	GetIntegralByUserIdReq        = pb.GetIntegralByUserIdReq
	GetIntegralByUserIdResp       = pb.GetIntegralByUserIdResp
	GetIntegralRecordByIdReq      = pb.GetIntegralRecordByIdReq
	GetIntegralRecordByIdResp     = pb.GetIntegralRecordByIdResp
	GetIntegralRecordByUserIdReq  = pb.GetIntegralRecordByUserIdReq
	GetIntegralRecordByUserIdResp = pb.GetIntegralRecordByUserIdResp
	GetTaskProgressReq            = pb.GetTaskProgressReq
	GetTaskProgressResp           = pb.GetTaskProgressResp
	GetTaskRecordByIdReq          = pb.GetTaskRecordByIdReq
	GetTaskRecordByIdResp         = pb.GetTaskRecordByIdResp
	GetTaskRecordByUserIdReq      = pb.GetTaskRecordByUserIdReq
	GetTaskRecordByUserIdResp     = pb.GetTaskRecordByUserIdResp
	GetTasksByIdReq               = pb.GetTasksByIdReq
	GetTasksByIdResp              = pb.GetTasksByIdResp
	Integral                      = pb.Integral
	IntegralRecord                = pb.IntegralRecord
	NoticeWishCheckinData         = pb.NoticeWishCheckinData
	NoticeWishCheckinReq          = pb.NoticeWishCheckinReq
	NoticeWishCheckinResp         = pb.NoticeWishCheckinResp
	SearchIntegralRecordReq       = pb.SearchIntegralRecordReq
	SearchIntegralRecordResp      = pb.SearchIntegralRecordResp
	SearchTaskRecordReq           = pb.SearchTaskRecordReq
	SearchTaskRecordResp          = pb.SearchTaskRecordResp
	SearchTasksReq                = pb.SearchTasksReq
	SearchTasksResp               = pb.SearchTasksResp
	TaskProgress                  = pb.TaskProgress
	TaskRecord                    = pb.TaskRecord
	Tasks                         = pb.Tasks
	UpdateCheckinRecordReq        = pb.UpdateCheckinRecordReq
	UpdateCheckinRecordResp       = pb.UpdateCheckinRecordResp
	UpdateIntegralRecordReq       = pb.UpdateIntegralRecordReq
	UpdateIntegralRecordResp      = pb.UpdateIntegralRecordResp
	UpdateIntegralResp            = pb.UpdateIntegralResp
	UpdateSubReq                  = pb.UpdateSubReq
	UpdateSubResp                 = pb.UpdateSubResp
	UpdateTaskRecordReq           = pb.UpdateTaskRecordReq
	UpdateTaskRecordResp          = pb.UpdateTaskRecordResp
	UpdateTasksReq                = pb.UpdateTasksReq
	UpdateTasksResp               = pb.UpdateTasksResp

	Checkin interface {
		AddCheckinRecord(ctx context.Context, in *AddCheckinRecordReq, opts ...grpc.CallOption) (*AddCheckinRecordResp, error)
		UpdateCheckinRecord(ctx context.Context, in *UpdateCheckinRecordReq, opts ...grpc.CallOption) (*UpdateCheckinRecordResp, error)
		GetCheckinRecordByUserId(ctx context.Context, in *GetCheckinRecordByUserIdReq, opts ...grpc.CallOption) (*GetCheckinRecordByUserIdResp, error)
		AddIntegral(ctx context.Context, in *AddIntegralReq, opts ...grpc.CallOption) (*AddIntegralResp, error)
		AddIntegralRecord(ctx context.Context, in *AddIntegralRecordReq, opts ...grpc.CallOption) (*AddIntegralRecordResp, error)
		DelIntegralRecord(ctx context.Context, in *DelIntegralRecordReq, opts ...grpc.CallOption) (*DelIntegralRecordResp, error)
		AddTaskRecord(ctx context.Context, in *AddTaskRecordReq, opts ...grpc.CallOption) (*AddTaskRecordResp, error)
		UpdateTaskRecord(ctx context.Context, in *UpdateTaskRecordReq, opts ...grpc.CallOption) (*UpdateTaskRecordResp, error)
		DelTaskRecord(ctx context.Context, in *DelTaskRecordReq, opts ...grpc.CallOption) (*DelTaskRecordResp, error)
		GetTaskRecordByUserId(ctx context.Context, in *GetTaskRecordByUserIdReq, opts ...grpc.CallOption) (*GetTaskRecordByUserIdResp, error)
		AddTasks(ctx context.Context, in *AddTasksReq, opts ...grpc.CallOption) (*AddTasksResp, error)
		DelTasks(ctx context.Context, in *DelTasksReq, opts ...grpc.CallOption) (*DelTasksResp, error)
		GetTaskProgress(ctx context.Context, in *GetTaskProgressReq, opts ...grpc.CallOption) (*GetTaskProgressResp, error)
		UpdateSub(ctx context.Context, in *UpdateSubReq, opts ...grpc.CallOption) (*UpdateSubResp, error)
		NoticeWishCheckin(ctx context.Context, in *NoticeWishCheckinReq, opts ...grpc.CallOption) (*NoticeWishCheckinResp, error)
	}

	defaultCheckin struct {
		cli zrpc.Client
	}
)

func NewCheckin(cli zrpc.Client) Checkin {
	return &defaultCheckin{
		cli: cli,
	}
}

func (m *defaultCheckin) AddCheckinRecord(ctx context.Context, in *AddCheckinRecordReq, opts ...grpc.CallOption) (*AddCheckinRecordResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.AddCheckinRecord(ctx, in, opts...)
}

func (m *defaultCheckin) UpdateCheckinRecord(ctx context.Context, in *UpdateCheckinRecordReq, opts ...grpc.CallOption) (*UpdateCheckinRecordResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.UpdateCheckinRecord(ctx, in, opts...)
}

func (m *defaultCheckin) GetCheckinRecordByUserId(ctx context.Context, in *GetCheckinRecordByUserIdReq, opts ...grpc.CallOption) (*GetCheckinRecordByUserIdResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.GetCheckinRecordByUserId(ctx, in, opts...)
}

func (m *defaultCheckin) AddIntegral(ctx context.Context, in *AddIntegralReq, opts ...grpc.CallOption) (*AddIntegralResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.AddIntegral(ctx, in, opts...)
}

func (m *defaultCheckin) AddIntegralRecord(ctx context.Context, in *AddIntegralRecordReq, opts ...grpc.CallOption) (*AddIntegralRecordResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.AddIntegralRecord(ctx, in, opts...)
}

func (m *defaultCheckin) DelIntegralRecord(ctx context.Context, in *DelIntegralRecordReq, opts ...grpc.CallOption) (*DelIntegralRecordResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.DelIntegralRecord(ctx, in, opts...)
}

func (m *defaultCheckin) AddTaskRecord(ctx context.Context, in *AddTaskRecordReq, opts ...grpc.CallOption) (*AddTaskRecordResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.AddTaskRecord(ctx, in, opts...)
}

func (m *defaultCheckin) UpdateTaskRecord(ctx context.Context, in *UpdateTaskRecordReq, opts ...grpc.CallOption) (*UpdateTaskRecordResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.UpdateTaskRecord(ctx, in, opts...)
}

func (m *defaultCheckin) DelTaskRecord(ctx context.Context, in *DelTaskRecordReq, opts ...grpc.CallOption) (*DelTaskRecordResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.DelTaskRecord(ctx, in, opts...)
}

func (m *defaultCheckin) GetTaskRecordByUserId(ctx context.Context, in *GetTaskRecordByUserIdReq, opts ...grpc.CallOption) (*GetTaskRecordByUserIdResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.GetTaskRecordByUserId(ctx, in, opts...)
}

func (m *defaultCheckin) AddTasks(ctx context.Context, in *AddTasksReq, opts ...grpc.CallOption) (*AddTasksResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.AddTasks(ctx, in, opts...)
}

func (m *defaultCheckin) DelTasks(ctx context.Context, in *DelTasksReq, opts ...grpc.CallOption) (*DelTasksResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.DelTasks(ctx, in, opts...)
}

func (m *defaultCheckin) GetTaskProgress(ctx context.Context, in *GetTaskProgressReq, opts ...grpc.CallOption) (*GetTaskProgressResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.GetTaskProgress(ctx, in, opts...)
}

func (m *defaultCheckin) UpdateSub(ctx context.Context, in *UpdateSubReq, opts ...grpc.CallOption) (*UpdateSubResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.UpdateSub(ctx, in, opts...)
}

func (m *defaultCheckin) NoticeWishCheckin(ctx context.Context, in *NoticeWishCheckinReq, opts ...grpc.CallOption) (*NoticeWishCheckinResp, error) {
	client := pb.NewCheckinClient(m.cli.Conn())
	return client.NoticeWishCheckin(ctx, in, opts...)
}
