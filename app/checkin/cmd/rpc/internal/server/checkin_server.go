// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: checkin.proto

package server

import (
	"context"

	"Luckify/app/checkin/cmd/rpc/internal/logic"
	"Luckify/app/checkin/cmd/rpc/internal/svc"
	"Luckify/app/checkin/cmd/rpc/pb"
)

type CheckinServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedCheckinServer
}

func NewCheckinServer(svcCtx *svc.ServiceContext) *CheckinServer {
	return &CheckinServer{
		svcCtx: svcCtx,
	}
}

func (s *CheckinServer) AddCheckinRecord(ctx context.Context, in *pb.AddCheckinRecordReq) (*pb.AddCheckinRecordResp, error) {
	l := logic.NewAddCheckinRecordLogic(ctx, s.svcCtx)
	return l.AddCheckinRecord(in)
}

func (s *CheckinServer) UpdateCheckinRecord(ctx context.Context, in *pb.UpdateCheckinRecordReq) (*pb.UpdateCheckinRecordResp, error) {
	l := logic.NewUpdateCheckinRecordLogic(ctx, s.svcCtx)
	return l.UpdateCheckinRecord(in)
}

func (s *CheckinServer) GetCheckinRecordByUserId(ctx context.Context, in *pb.GetCheckinRecordByUserIdReq) (*pb.GetCheckinRecordByUserIdResp, error) {
	l := logic.NewGetCheckinRecordByUserIdLogic(ctx, s.svcCtx)
	return l.GetCheckinRecordByUserId(in)
}

func (s *CheckinServer) AddIntegral(ctx context.Context, in *pb.AddIntegralReq) (*pb.AddIntegralResp, error) {
	l := logic.NewAddIntegralLogic(ctx, s.svcCtx)
	return l.AddIntegral(in)
}

func (s *CheckinServer) AddIntegralRecord(ctx context.Context, in *pb.AddIntegralRecordReq) (*pb.AddIntegralRecordResp, error) {
	l := logic.NewAddIntegralRecordLogic(ctx, s.svcCtx)
	return l.AddIntegralRecord(in)
}

func (s *CheckinServer) DelIntegralRecord(ctx context.Context, in *pb.DelIntegralRecordReq) (*pb.DelIntegralRecordResp, error) {
	l := logic.NewDelIntegralRecordLogic(ctx, s.svcCtx)
	return l.DelIntegralRecord(in)
}

func (s *CheckinServer) AddTaskRecord(ctx context.Context, in *pb.AddTaskRecordReq) (*pb.AddTaskRecordResp, error) {
	l := logic.NewAddTaskRecordLogic(ctx, s.svcCtx)
	return l.AddTaskRecord(in)
}

func (s *CheckinServer) UpdateTaskRecord(ctx context.Context, in *pb.UpdateTaskRecordReq) (*pb.UpdateTaskRecordResp, error) {
	l := logic.NewUpdateTaskRecordLogic(ctx, s.svcCtx)
	return l.UpdateTaskRecord(in)
}

func (s *CheckinServer) DelTaskRecord(ctx context.Context, in *pb.DelTaskRecordReq) (*pb.DelTaskRecordResp, error) {
	l := logic.NewDelTaskRecordLogic(ctx, s.svcCtx)
	return l.DelTaskRecord(in)
}

func (s *CheckinServer) GetTaskRecordByUserId(ctx context.Context, in *pb.GetTaskRecordByUserIdReq) (*pb.GetTaskRecordByUserIdResp, error) {
	l := logic.NewGetTaskRecordByUserIdLogic(ctx, s.svcCtx)
	return l.GetTaskRecordByUserId(in)
}

func (s *CheckinServer) AddTasks(ctx context.Context, in *pb.AddTasksReq) (*pb.AddTasksResp, error) {
	l := logic.NewAddTasksLogic(ctx, s.svcCtx)
	return l.AddTasks(in)
}

func (s *CheckinServer) DelTasks(ctx context.Context, in *pb.DelTasksReq) (*pb.DelTasksResp, error) {
	l := logic.NewDelTasksLogic(ctx, s.svcCtx)
	return l.DelTasks(in)
}

func (s *CheckinServer) GetTaskProgress(ctx context.Context, in *pb.GetTaskProgressReq) (*pb.GetTaskProgressResp, error) {
	l := logic.NewGetTaskProgressLogic(ctx, s.svcCtx)
	return l.GetTaskProgress(in)
}

func (s *CheckinServer) UpdateSub(ctx context.Context, in *pb.UpdateSubReq) (*pb.UpdateSubResp, error) {
	l := logic.NewUpdateSubLogic(ctx, s.svcCtx)
	return l.UpdateSub(in)
}

func (s *CheckinServer) NoticeWishCheckin(ctx context.Context, in *pb.NoticeWishCheckinReq) (*pb.NoticeWishCheckinResp, error) {
	l := logic.NewNoticeWishCheckinLogic(ctx, s.svcCtx)
	return l.NoticeWishCheckin(in)
}
