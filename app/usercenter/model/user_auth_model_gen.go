// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGoLotteryUsercenterUserAuthIdPrefix              = "cache:goLotteryUsercenter:userAuth:id:"
	cacheGoLotteryUsercenterUserAuthAuthTypeAuthKeyPrefix = "cache:goLotteryUsercenter:userAuth:authType:authKey:"
	cacheGoLotteryUsercenterUserAuthUserIdAuthTypePrefix  = "cache:goLotteryUsercenter:userAuth:userId:authType:"
)

type (
	userAuthModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserAuth) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []UserAuth) error
		FindOne(ctx context.Context, id int64) (*UserAuth, error)
		FindOneByAuthTypeAuthKey(ctx context.Context, authType string, authKey string) (*UserAuth, error)
		FindOneByUserIdAuthType(ctx context.Context, userId int64, authType string) (*UserAuth, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserAuth) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserAuth) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserAuth) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserAuthModel struct {
		gormc.CachedConn
		table string
	}

	UserAuth struct {
		Id         int64     `gorm:"column:id;primary_key"`
		CreateTime time.Time `gorm:"column:create_time"`
		UpdateTime time.Time `gorm:"column:update_time"`
		UserId     int64     `gorm:"column:user_id"`
		AuthKey    string    `gorm:"column:auth_key"`  // 平台唯一id
		AuthType   string    `gorm:"column:auth_type"` // 平台类型
	}
)

func (UserAuth) TableName() string {
	return "`user_auth`"
}

func newUserAuthModel(conn *gorm.DB, c cache.CacheConf) *defaultUserAuthModel {
	return &defaultUserAuthModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_auth`",
	}
}

func (m *defaultUserAuthModel) GetCacheKeys(data *UserAuth) []string {
	if data == nil {
		return []string{}
	}
	goLotteryUsercenterUserAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGoLotteryUsercenterUserAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	goLotteryUsercenterUserAuthIdKey := fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserAuthIdPrefix, data.Id)
	goLotteryUsercenterUserAuthUserIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGoLotteryUsercenterUserAuthUserIdAuthTypePrefix, data.UserId, data.AuthType)
	cacheKeys := []string{
		goLotteryUsercenterUserAuthAuthTypeAuthKeyKey, goLotteryUsercenterUserAuthIdKey, goLotteryUsercenterUserAuthUserIdAuthTypeKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserAuthModel) Insert(ctx context.Context, tx *gorm.DB, data *UserAuth) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Omit(userAuthOmitColumns...).Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultUserAuthModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []UserAuth) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultUserAuthModel) FindOne(ctx context.Context, id int64) (*UserAuth, error) {
	goLotteryUsercenterUserAuthIdKey := fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserAuthIdPrefix, id)
	var resp UserAuth
	err := m.QueryCtx(ctx, &resp, goLotteryUsercenterUserAuthIdKey, func(conn *gorm.DB) error {
		return conn.Model(&UserAuth{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthModel) FindOneByAuthTypeAuthKey(ctx context.Context, authType string, authKey string) (*UserAuth, error) {
	goLotteryUsercenterUserAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGoLotteryUsercenterUserAuthAuthTypeAuthKeyPrefix, authType, authKey)
	var resp UserAuth
	err := m.QueryRowIndexCtx(ctx, &resp, goLotteryUsercenterUserAuthAuthTypeAuthKeyKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&UserAuth{}).Where("`auth_type` = ? and `auth_key` = ?", authType, authKey).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthModel) FindOneByUserIdAuthType(ctx context.Context, userId int64, authType string) (*UserAuth, error) {
	goLotteryUsercenterUserAuthUserIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGoLotteryUsercenterUserAuthUserIdAuthTypePrefix, userId, authType)
	var resp UserAuth
	err := m.QueryRowIndexCtx(ctx, &resp, goLotteryUsercenterUserAuthUserIdAuthTypeKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&UserAuth{}).Where("`user_id` = ? and `auth_type` = ?", userId, authType).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthModel) Update(ctx context.Context, tx *gorm.DB, data *UserAuth) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Omit(userAuthOmitColumns...).Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultUserAuthModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserAuth) error {
	clearData := make([]UserAuth, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultUserAuthModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserAuth{}, id).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultUserAuthModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserAuth) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultUserAuthModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserAuthModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserAuthIdPrefix, primary)
}

func (m *defaultUserAuthModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserAuth{}).Where("`id` = ?", primary).Take(v).Error
}
