// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoLotteryUsercenterUserIdPrefix     = "cache:goLotteryUsercenter:user:id:"
	cacheGoLotteryUsercenterUserMobilePrefix = "cache:goLotteryUsercenter:user:mobile:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByMobile(ctx context.Context, mobile string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id               int64     `db:"id"`
		CreateTime       time.Time `db:"create_time"`
		UpdateTime       time.Time `db:"update_time"`
		Mobile           string    `db:"mobile"`            // 手机号
		Password         string    `db:"password"`          // 密码
		Nickname         string    `db:"nickname"`          // 昵称
		Sex              int64     `db:"sex"`               // 性别 0:男 1:女
		Avatar           string    `db:"avatar"`            // 头像
		IsAdmin          int64     `db:"is_admin"`          // 是否管理员 0:否 1:是
		Signature        string    `db:"signature"`         // 个性签名
		LocationName     string    `db:"location_name"`     // 地址名称
		Longitude        float64   `db:"longitude"`         // 经度
		Latitude         float64   `db:"latitude"`          // 纬度
		TotalPrize       int64     `db:"total_prize"`       // 累计奖品
		Fans             int64     `db:"fans"`              // 粉丝数量
		AllLottery       int64     `db:"all_lottery"`       // 全部抽奖包含我发起的、我中奖的
		InitiationRecord int64     `db:"initiation_record"` // 发起抽奖记录
		WinningRecord    int64     `db:"winning_record"`    // 中奖记录
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goLotteryUsercenterUserIdKey := fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserIdPrefix, id)
	goLotteryUsercenterUserMobileKey := fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goLotteryUsercenterUserIdKey, goLotteryUsercenterUserMobileKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	goLotteryUsercenterUserIdKey := fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, goLotteryUsercenterUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByMobile(ctx context.Context, mobile string) (*User, error) {
	goLotteryUsercenterUserMobileKey := fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserMobilePrefix, mobile)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, goLotteryUsercenterUserMobileKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `mobile` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, mobile); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	goLotteryUsercenterUserIdKey := fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserIdPrefix, data.Id)
	goLotteryUsercenterUserMobileKey := fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserMobilePrefix, data.Mobile)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Mobile, data.Password, data.Nickname, data.Sex, data.Avatar, data.IsAdmin, data.Signature, data.LocationName, data.Longitude, data.Latitude, data.TotalPrize, data.Fans, data.AllLottery, data.InitiationRecord, data.WinningRecord)
	}, goLotteryUsercenterUserIdKey, goLotteryUsercenterUserMobileKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goLotteryUsercenterUserIdKey := fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserIdPrefix, data.Id)
	goLotteryUsercenterUserMobileKey := fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Mobile, newData.Password, newData.Nickname, newData.Sex, newData.Avatar, newData.IsAdmin, newData.Signature, newData.LocationName, newData.Longitude, newData.Latitude, newData.TotalPrize, newData.Fans, newData.AllLottery, newData.InitiationRecord, newData.WinningRecord, newData.Id)
	}, goLotteryUsercenterUserIdKey, goLotteryUsercenterUserMobileKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoLotteryUsercenterUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
