// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: usercenter.proto

package server

import (
	"context"

	"Luckify/app/usercenter/cmd/rpc/internal/logic"
	"Luckify/app/usercenter/cmd/rpc/internal/svc"
	"Luckify/app/usercenter/cmd/rpc/pb"
)

type UsercenterServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUsercenterServer
}

func NewUsercenterServer(svcCtx *svc.ServiceContext) *UsercenterServer {
	return &UsercenterServer{
		svcCtx: svcCtx,
	}
}

func (s *UsercenterServer) Login(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UsercenterServer) Register(ctx context.Context, in *pb.RegisterReq) (*pb.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UsercenterServer) WxMiniAuth(ctx context.Context, in *pb.WxMiniAuthReq) (*pb.WxMiniAuthResp, error) {
	l := logic.NewWxMiniAuthLogic(ctx, s.svcCtx)
	return l.WxMiniAuth(in)
}

func (s *UsercenterServer) GenerateToken(ctx context.Context, in *pb.GenerateTokenReq) (*pb.GenerateTokenResp, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}

func (s *UsercenterServer) GetUserInfo(ctx context.Context, in *pb.GetUserInfoReq) (*pb.GetUserInfoResp, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UsercenterServer) UpdateUserBaseInfo(ctx context.Context, in *pb.UpdateUserBaseInfoReq) (*pb.UpdateUserBaseInfoResp, error) {
	l := logic.NewUpdateUserBaseInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserBaseInfo(in)
}

func (s *UsercenterServer) GetUserInfoByUserIds(ctx context.Context, in *pb.GetUserInfoByUserIdsReq) (*pb.GetUserInfoByUserIdsResp, error) {
	l := logic.NewGetUserInfoByUserIdsLogic(ctx, s.svcCtx)
	return l.GetUserInfoByUserIds(in)
}

func (s *UsercenterServer) GetUserAuthByAuthKey(ctx context.Context, in *pb.GetUserAuthByAuthKeyReq) (*pb.GetUserAuthByAuthKeyResp, error) {
	l := logic.NewGetUserAuthByAuthKeyLogic(ctx, s.svcCtx)
	return l.GetUserAuthByAuthKey(in)
}

func (s *UsercenterServer) GetUserAuthByUserId(ctx context.Context, in *pb.GetUserAuthByUserId) (*pb.GetUserAuthByUserIdResp, error) {
	l := logic.NewGetUserAuthByUserIdLogic(ctx, s.svcCtx)
	return l.GetUserAuthByUserId(in)
}

func (s *UsercenterServer) AddUserSponsor(ctx context.Context, in *pb.AddUserSponsorReq) (*pb.AddUserSponsorResp, error) {
	l := logic.NewAddUserSponsorLogic(ctx, s.svcCtx)
	return l.AddUserSponsor(in)
}

func (s *UsercenterServer) UpdateUserSponsor(ctx context.Context, in *pb.UpdateUserSponsorReq) (*pb.UpdateUserSponsorResp, error) {
	l := logic.NewUpdateUserSponsorLogic(ctx, s.svcCtx)
	return l.UpdateUserSponsor(in)
}

func (s *UsercenterServer) DelUserSponsor(ctx context.Context, in *pb.DelUserSponsorReq) (*pb.DelUserSponsorResp, error) {
	l := logic.NewDelUserSponsorLogic(ctx, s.svcCtx)
	return l.DelUserSponsor(in)
}

func (s *UsercenterServer) SearchUserSponsor(ctx context.Context, in *pb.SearchUserSponsorReq) (*pb.SearchUserSponsorResp, error) {
	l := logic.NewSearchUserSponsorLogic(ctx, s.svcCtx)
	return l.SearchUserSponsor(in)
}

func (s *UsercenterServer) SponsorDetail(ctx context.Context, in *pb.SponsorDetailReq) (*pb.SponsorDetailResp, error) {
	l := logic.NewSponsorDetailLogic(ctx, s.svcCtx)
	return l.SponsorDetail(in)
}
