// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: notice.proto

package notice

import (
	"context"

	"Luckify/app/notice/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetNoticeSubscribePreferenceReq   = pb.GetNoticeSubscribePreferenceReq
	GetNoticeSubscribePreferenceResp  = pb.GetNoticeSubscribePreferenceResp
	NoticeLotteryDrawReq              = pb.NoticeLotteryDrawReq
	NoticeLotteryDrawResp             = pb.NoticeLotteryDrawResp
	NoticeLotteryStartReq             = pb.NoticeLotteryStartReq
	NoticeLotteryStartResp            = pb.NoticeLotteryStartResp
	NoticeSubscribePreference         = pb.NoticeSubscribePreference
	NoticeWishSignInReq               = pb.NoticeWishSignInReq
	NoticeWishSignInResp              = pb.NoticeWishSignInResp
	SaveNoticeSubscribePreferenceReq  = pb.SaveNoticeSubscribePreferenceReq
	SaveNoticeSubscribePreferenceResp = pb.SaveNoticeSubscribePreferenceResp

	Notice interface {
		NoticeWishSign(ctx context.Context, in *NoticeWishSignInReq, opts ...grpc.CallOption) (*NoticeWishSignInResp, error)
	}

	defaultNotice struct {
		cli zrpc.Client
	}
)

func NewNotice(cli zrpc.Client) Notice {
	return &defaultNotice{
		cli: cli,
	}
}

func (m *defaultNotice) NoticeWishSign(ctx context.Context, in *NoticeWishSignInReq, opts ...grpc.CallOption) (*NoticeWishSignInResp, error) {
	client := pb.NewNoticeClient(m.cli.Conn())
	return client.NoticeWishSign(ctx, in, opts...)
}
